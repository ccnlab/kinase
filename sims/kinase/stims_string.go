// Code generated by "stringer -type=Stims"; DO NOT EDIT.

package main

import (
	"errors"
	"strconv"
)

var _ = errors.New("dummy error")

func _() {
	// An "invalid array index" compiler error signifies that the constant values have changed.
	// Re-run the stringer command to generate them again.
	var x [1]struct{}
	_ = x[Baseline-0]
	_ = x[STDP-1]
	_ = x[STDPSweep-2]
	_ = x[STDPPacketSweep-3]
	_ = x[Poisson-4]
	_ = x[SPoissonRGClamp-5]
	_ = x[PoissonHzSweep-6]
	_ = x[PoissonDurSweep-7]
	_ = x[OpPhaseDurSweep-8]
	_ = x[ThetaErr-9]
	_ = x[ThetaErrComp-10]
	_ = x[ThetaErrSweep-11]
	_ = x[ThetaErrAllSweep-12]
	_ = x[StimsN-13]
}

const _Stims_name = "BaselineSTDPSTDPSweepSTDPPacketSweepPoissonSPoissonRGClampPoissonHzSweepPoissonDurSweepOpPhaseDurSweepThetaErrThetaErrCompThetaErrSweepThetaErrAllSweepStimsN"

var _Stims_index = [...]uint8{0, 8, 12, 21, 36, 43, 58, 72, 87, 102, 110, 122, 135, 151, 157}

func (i Stims) String() string {
	if i < 0 || i >= Stims(len(_Stims_index)-1) {
		return "Stims(" + strconv.FormatInt(int64(i), 10) + ")"
	}
	return _Stims_name[_Stims_index[i]:_Stims_index[i+1]]
}

func (i *Stims) FromString(s string) error {
	for j := 0; j < len(_Stims_index)-1; j++ {
		if s == _Stims_name[_Stims_index[j]:_Stims_index[j+1]] {
			*i = Stims(j)
			return nil
		}
	}
	return errors.New("String: " + s + " is not a valid option for type: Stims")
}
